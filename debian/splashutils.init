#!/bin/bash

. /lib/lsb/init-functions

#
## Config file
#
if [ -r /etc/splash/splash.conf ]; then
    . /etc/splash/splash.conf
fi

[ -z "${SPLASH_THEME}" ] && SPLASH_THEME="default"
if [ -z "${SPLASH_TTYS}" ]; then
    if [ -n "${RC_TTY_NUMBER}" ]; then	
	SPLASH_TTYS=$(seq 0 "${RC_TTY_NUMBER}")
    else
	SPLASH_TTYS="0 1 3 4 5 6"
    fi
fi

spl_daemon="/sbin/fbsplashd.static"
spl_fbcd="/sbin/fbcondecor_ctl"
spl_cachedir="/lib/splash/cache"
spl_tmpdir="/lib/splash/tmp"
spl_cachesize="4096"
spl_cachetype="tmpfs"
spl_fifo="${spl_cachedir}/.splash"
spl_pidfile="${spl_cachedir}/daemon.pid"
spl_removesurvey=1
spl_fbsupport=0

[[ -z ${SPLASH_BOOT_MESSAGE} ]]     && SPLASH_BOOT_MESSAGE="Booting the system (\$progress%)... Press F2 for verbose mode"
[[ -z ${SPLASH_SHUTDOWN_MESSAGE} ]] && SPLASH_SHUTDOWN_MESSAGE="Shutting down the system (\$progress%)... Press F2 for verbose mode"
[[ -z ${SPLASH_REBOOT_MESSAGE} ]]   && SPLASH_REBOOT_MESSAGE="Rebooting the system (\$progress%)... Press F2 for verbose mode"

check_fbsupport() {
    if [ -e /dev/fbsplash ] && [ -e /proc/fbsplash -o -e /proc/sys/kernel/fbsplash ]; then
        spl_fbsupport=1
    fi
    
    if [ -e /dev/fbcondecor ] && [ -e /proc/fbsplash -o -e /proc/sys/kernel/fbcondecor ]; then
        spl_fbsupport=1
    fi
}


get_boot_message() {
    local text

    if [[ ${RUNLEVEL} == "6" ]]; then
        text=${SPLASH_REBOOT_MESSAGE}
    elif [[ ${RUNLEVEL} == "0" ]]; then
        text=${SPLASH_SHUTDOWN_MESSAGE}
    else
        text=${SPLASH_BOOT_MESSAGE}
    fi	
    
    echo ${text}
}

splash_setup() {
    if [[ ${SPLASH_THEME} != "" && ${SPLASH_TTY} != "" && "$1" != "force" ]]; then
	return 0
    fi
    
    export SPLASH_MODE_REQ="off"
    export SPLASH_THEME="default"
    export SPLASH_TTY="16"
    export SPLASH_KDMODE="TEXT"
    
    #
    ## Values from config file if any
    #
    if [[ -r /etc/splash/splash ]]; then 
	. /etc/splash/splash
    fi
    
    if [[ -r /proc/cmdline ]]; then

        grep -q -w single /proc/cmdline

        #
        ## In single user mode, this is a maintenance level and all messages
        ## are expected to show - what about it you want to see a message and
        ## do not have time to hit Alt-F1 ?
        ## To be discussed - a priori I would prefer to not have to worry with
        ## fbsplash - if you disagree no pb - just tell me!
        #

        if [ $? -ne 0 ]; then

            options=$(grep 'splash=[^ ]*' -o /proc/cmdline)
            options=${options#*=}
	
            for i in ${options//,/ } ; do
                case ${i%:*} in
                    theme)		SPLASH_THEME=${i#*:} ;;
                    tty)		SPLASH_TTY=${i#*:} ;;
                    verbose) 	SPLASH_MODE_REQ="verbose" ;;
                    silent)		SPLASH_MODE_REQ="silent" ;;
                    kdgraphics)	SPLASH_KDMODE="GRAPHICS" ;;
                esac
            done

        fi

    fi
}

splash_verbose() {
	/sbin/splash "verbose"
}

# Sends data to the splash FIFO after making sure there's someone
# alive on other end to receive it.
splash_comm_send() {
    if [[ ! -e ${spl_pidfile} ]]; then
	return 1
    fi
    
    if [[ -r /proc/$(<${spl_pidfile})/status && 
		"$((read t;echo ${t/Name:/}) </proc/$(<${spl_pidfile})/status)" == "fbsplashd.stati" ]]; then
	echo $* > ${spl_fifo} &		
    fi
}

splash_get_mode() {
    #
    ## fgconsole is from miscsplashutils package
    #
    local ctty="$(/lib/splash/bin/fgconsole)"

    if [[ ${ctty} == "${SPLASH_TTY}" ]]; then
	echo "silent"
    else
	if [[ -z "$(${spl_fbcd} -c getstate --vc=$(($ctty-1)) 2>/dev/null | grep off)" ]]; then
	    echo "verbose"
	else
	    echo "off"
	fi	
    fi
}

splash_remove_survey() {
    [ ${spl_removesurvey} -eq 1 ] && rm -f "${spl_cachedir}/survey" "/tmp/.splashsurvey" 2>/dev/null
}

splash_cache_cleanup() {
    # Don't try to clean anything up if the cachedir is not mounted.
    [[ -z "$(grep ${spl_cachedir} /proc/mounts)" ]] && return;
    [[ ! -d "${spl_tmpdir}" ]] && mkdir "${spl_tmpdir}"
    mount -n --move "${spl_cachedir}" "${spl_tmpdir}"

    # Make sure the splash daemon is dead.
    killall -9 ${spl_daemon##*/} >/dev/null 2>/dev/null
    splash_remove_survey
    umount -l "${spl_tmpdir}" 2>/dev/null
    splash_remove_survey
}

case "$1" in
  start)
        check_fbsupport

	# only do this if the kernel supports fbsplash
	if [ ${spl_fbsupport} -eq 1 ]
	then
	    splash_setup force

	    if [[ ${SPLASH_MODE_REQ} == "off" ]]; then
		exit 0
	    fi

	    # Prepare the cache here - rc_init-pre might want to use it
	    mount -ns -t "${spl_cachetype}" cachedir "${spl_tmpdir}" -o rw,mode=0644,size="${spl_cachesize}"k
	    
	    retval=$?
	
	    if [[ ${retval} -ne 0 ]]; then
		eerror "Unable to create splash cache - switching to verbose."
		splash_verbose
		exit ${retval}
	    fi
	
	    # Move the writable tmpfs to our cache, faking something writable on a fs that is not yet mounted rw
	    mount -n --move "${spl_tmpdir}" "${spl_cachedir}"

	    /sbin/splash "start"
	    # Set the input device if it exists
	    t=$(grep -Hsi keyboard /sys/class/input/event*/device/driver/description | grep -o 'event[0-9]\+') 
	    if [[ -z "${t}" ]]; then
		# Try an alternative method of finding the event device. The idea comes
		# from Bombadil <bombadil(at)h3c.de>. We're couting on the keyboard controller
		# being the first device handled by kbd listed in input/devices.
		t=$(/bin/grep -s -m 1 '^H: Handlers=kbd' /proc/bus/input/devices | grep -o 'event[0-9]*')
	    fi

	    if [[ -n "${t}" ]]; then
		splash_comm_send "set event dev /dev/input/${t}"
	    fi
	    
	    for TTY in ${SPLASH_TTYS} ; do
		theme="${SPLASH_THEME}"

		[[ ${TTY} == "1" && -z "$(${spl_fbcd} -c getstate --tty=${TTY}| grep 'off')" ]] && continue
		[[ ${TTY} == "0" ]] && continue
		
		if [[ -n "${SPLASH_TTY_MAP}" ]]; then
		    for i in ${SPLASH_TTY_MAP} ; do
			if [[ "${i%:*}" == "${TTY}" ]]; then
			    theme="${i#*:}"
			fi
		    done
		fi
		
                #
                ## openvt is in the console-tools package
                #
		if [[ -x /usr/bin/openvt ]]; then
		    /usr/bin/openvt -c ${TTY} echo -n "" 2>/dev/null
		fi
		
		[[ -z "$(${spl_fbcd} -c getstate --tty=${TTY} 2>/dev/null| grep 'off')" && -n "$(${spl_fbcd} -c getcfg --tty=${TTY} 2>/dev/null| grep ^theme:[[:space:]]*${theme}$)" ]] && continue
		${spl_fbcd} --tty="${TTY}" -m v -t "${theme}" -c setcfg 2>/dev/null 
		${spl_fbcd} --tty="${TTY}" -m v -t "${theme}" -c setpic 2>/dev/null
		${spl_fbcd} --tty="${TTY}" -c on 2>/dev/null
	    done

	else
	    # echo "Your kernel does not support fbsplash"
	    exit 1
	fi
	;;
    
    status)
	pidofproc fbsplashd.static >/dev/null
	status=$?
        exit $status
	;;
    
    restart)
        spl_removesurvey=0
	$0 start
	;;

    reload|force-reload)
	echo "Error: argument '$1' not supported" >&2
	exit 3
	;;
    
    stop)
	
        if [[ "$(splash_get_mode)" == "silent" ]]; then
	    /sbin/splash "verbose"
        fi

        splash_comm_send "exit"
        splash_cache_cleanup

	# Make sure the splash daemon is really dead (just in case the killall
	# in splash_cache_cleanup didn't get executed). This should fix Gentoo
	# bug #96697.
	killall -9 ${spl_daemon##*/} >/dev/null 2>/dev/null
	;;

    progress)
        check_fbsupport

	# only do this if the kernel supports fbsplash
	if [ ${spl_fbsupport} -eq 1 ]
	then
	    splash_setup force

	    splash_comm_send "progress ${2}"

	    if [[ "$(splash_get_mode)" == "silent" ]]; then
		t=$(get_boot_message)
		splash_comm_send "paint"

		if [[ -z "${t//*\$progress*/}" && -e ${spl_cachedir}/message ]]; then
			source ${spl_cachedir}/message
			if [[ -n "${text_x}" && -n "${text_y}" && -n "${text_size}" ]]; then
				splash_comm_send "paint rect ${text_x} ${text_y} ${xres} $(($text_y+5*$text_size))"
			fi
		fi
	    fi
	fi
	;;
    *)
	echo "Usage: splashutils [start|stop]" >&2
	exit 3
	;;
esac

:
