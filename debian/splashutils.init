#!/bin/bash

. /lib/lsb/init-functions
. /sbin/splash-functions.sh

spl_lasterror="${spl_cachedir}/lasterror"

#
## Prevent killall5 of fbsplashd.static
#
splash_add_omit()
{
    touch /var/run/sendsigs.omit 2>/dev/null
    if [ $? -eq 0 ]; then
	pidof=`pidofproc fbsplashd.static`
	[ "x${pidof}" != "x" ] &&  echo ${pidof} >> /var/run/sendsigs.omit
    fi
}

#
## Remove killall5 protection
#
splash_remove_omit()
{
    pidof=`pidofproc fbsplashd.static`
    if [ -s /var/run/sendsigs.omit -a "x${pidof}" != "x" ]; then
	touch /var/run/sendsigs.omit 2>/dev/null
	if [ $? -eq 0 ]; then
	    rm -f /var/run/sendsigs.omit.tmp
	    egrep -v "^${pidof}\$" /var/run/sendsigs.omit > /var/run/sendsigs.omit.tmp
	    mv -f /var/run/sendsigs.omit.tmp /var/run/sendsigs.omit
	fi
    fi
}

#
## Prevent killall5 of fbsplashd.static
## Done at each progress, because it is likely the the splash_add_omit
## has failed, /var/run being read-only at that time
#
splash_update_omit()
{
    touch /var/run/sendsigs.omit 2>/dev/null
    if [ $? -eq 0 ]; then
	pidof=`pidofproc fbsplashd.static`
	if [ "x${pidof}" != "x" ]; then
	    egrep -q "^${pidof}\$" /var/run/sendsigs.omit 2>/dev/null
	    [ $? -ne 0 ] && echo ${pidof} >> /var/run/sendsigs.omit 2>/dev/null
	fi
    fi
}

#
## Set a theme on a tty
#
set_theme()
{
    ${spl_decor} --tty="${2}" -t "${1}" -c setcfg || return 1
    ${spl_decor} --tty="${2}" -t "${1}" -c setpic -q
    ${spl_decor} --tty="${2}" -c on || return 1
    
    return 0
}

case "$1" in

    bgsetup)
        # only do this if the kernel supports fbsplash
	if fbcondecor_supported ; then
	    
            if [ -z "${SPLASH_TTYS}" ]; then
                if [ -n "${RC_TTY_NUMBER}" ]; then	
                    SPLASH_TTYS=$(seq 1 "${RC_TTY_NUMBER}")
                else
                    if [ "x$2" != "x" ]; then
                        $SPLASH_TTYS=$2
                    else
                        SPLASH_TTYS="1 2 3 4 5 6"
                    fi
                fi
            fi

            # Initialize fbcondecodor
	    for TTY in ${SPLASH_TTYS} ; do
		theme="${SPLASH_THEME}"
		
                [ ${TTY} = "1" -a -z "$(${spl_decor} -c getstate --tty=${TTY}| grep 'off')" ] && continue
                [ ${TTY} = "0" ] && continue

                if [ -n "${SPLASH_TTY_MAP}" ]; then
		    for i in ${SPLASH_TTY_MAP} ; do
                        if [ "${i%:*}" = "${TTY}" ]; then
			    theme="${i#*:}"
			fi
		    done
		fi
		
                #
                ## openvt is in the console-tools package
                #
		if [ -x /usr/bin/openvt ]; then
		    /usr/bin/openvt -c ${TTY} -- printf "" 2>/dev/null
		fi
		
                if ! fbcondecor_set_theme "${theme}" "${TTY}"; then
                    if [ -z "${FBCONDECOR_TTY_MAP}" ]; then
                        [ -z "${SPLASH_SILENT}" ] && log_warning_msg "Failed to set background image on tty${TTY}"
                        break
                    fi
                fi

                rm -f ${spl_lasterror}

	    done
	else
            # echo "Your kernel does not support fbcondecor"
	    exit 1
	fi
	;;
    
    start)
        [ -z "${SPLASH_SILENT}" ] && log_daemon_msg "Starting splashutils daemon" "fbsplashd.static"

        # only do this if the kernel supports fbsplash
	if fbcondecor_supported ; then
	    
            splash_setup
            splash rc_init sysinit

            $0 status
            spl_status=$?
            if [ $spl_status -ne 0 ]; then
                [ -z "${SPLASH_SILENT}" ] && log_end_msg 1
                exit $spl_status
            fi
            #
            ## Initialize backgrounds
            #
            $0 bgsetup

	    #
	    ## Prevent killall5 of fbsplashd.static
	    #
	    splash_add_omit

            rm -f ${spl_lasterror}

            [ -z "${SPLASH_SILENT}" ] && log_end_msg 0
	else
            [ -z "${SPLASH_SILENT}" ] && log_failure_msg "Your kernel does not support fbcondecor"
            [ -z "${SPLASH_SILENT}" ] && log_end_msg 1
	    exit 1
	fi
	;;
    
    status)
	pidofproc fbsplashd.static >/dev/null
	spl_status=$?
	exit $spl_status
	;;
    
    restart)
	$0 stop
	$0 start
	;;
    
    condrestart)
        #
        ## If last unsuccessful condrestart was from another runlevel
        ## give it a try again
        #
        if [ -s ${spl_lasterror} ]; then
            lastrunlevel=`tail -1 ${spl_lasterror}`
            [ "$lastrunlevel" != "$RUNLEVEL" ] && rm -f ${spl_lasterror}
        fi
	$0 status
	spl_status=$?
	if [ $spl_status -ne 0 -a ! -s ${spl_lasterror} ]; then
            #
            ## Make sure the cache is clean in any case
            #
            splash_cache_cleanup
            $0 start
            $0 status
            spl_status=$?
            if [ $spl_status -ne 0 ]; then
                touch ${spl_lasterror} && echo $RUNLEVEL >> ${spl_lasterror}
		exit 1
	    fi
        elif [ $spl_status -ne 0 ]; then
            exit 1
        fi
	;;
    
    reload|force-reload)
	echo "Error: argument '$1' not supported" >&2
	exit 3
	;;
    
    stop)
        [ -z "${SPLASH_SILENT}" ] && log_daemon_msg "Stopping splashutils daemon" "fbsplashd.static"
        rm -f ${spl_lasterror}
	$0 status
	spl_status=$?
	if [ $spl_status -eq 0 ]; then
	    #
	    ## Remove prevention against killall5
	    #
            splash_remove_omit
            splash_exit
        fi
        #
        ## Force again cache cleanup in any case
        #
        splash_cache_cleanup
	$0 status
	spl_status=$?
	if [ $spl_status -eq 0 ]; then
            [ -z "${SPLASH_SILENT}" ] && log_end_msg 1
            exit 1
        else
            [ -z "${SPLASH_SILENT}" ] && log_end_msg 0
            exit 0
        fi
	;;
    
    progress)
        $0 condrestart
        if [ $? -eq 0 ]; then
            splash_update_omit
            splash_comm_send "progress ${2}"
            splash_comm_send "paint"
            rm -f ${spl_lasterror}
        fi
	;;
    
    PROGRESS)
        $0 condrestart
        if [ $? -eq 0 ]; then
            splash_update_omit
            value=${2}
            if [ ${value} -lt 0 ]; then
                value=$[-${value}]
            fi
            value=$((${value} * 65535 / 100))
            splash_comm_send "progress ${value}"
            splash_comm_send "paint"
            rm -f ${spl_lasterror}
        fi
	;;
    
    *)
	echo "Usage: splashutils [start|stop|status|condrestart|restart|progress {0...65535}|PROGRESS {-100...+100}]" >&2
	exit 3
	;;
esac

exit 0
